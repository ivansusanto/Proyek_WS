{
	"info": {
		"_postman_id": "6b89bcf6-f6a2-432c-a46c-a1a95266250c",
		"name": "Proyek WS Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27454200"
	},
	"item": [
		{
			"name": "Developers",
			"item": [
				{
					"name": "Register",
					"item": [
						{
							"name": "Register Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 201 value', () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test('Response should return JWT token', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    const { token } = responseJson;\r",
											" \r",
											"    pm.expect(token).to.exist;\r",
											"    pm.expect(token).to.not.be.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "felicia",
											"type": "default"
										},
										{
											"key": "password",
											"value": "123",
											"type": "default"
										},
										{
											"key": "email",
											"value": "feliciap@gmail.com",
											"type": "default"
										},
										{
											"key": "full_name",
											"value": "feliciaa",
											"type": "default"
										},
										{
											"key": "display_name",
											"value": "fel",
											"type": "default"
										}
									]
								},
								"url": {
									"raw": "{{host}}/developers/register",
									"host": [
										"{{host}}"
									],
									"path": [
										"developers",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register Validation Error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 400 value', () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response should not have empty fields', () => {\r",
											"  const responseJson = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseJson.message).to.include(\"is not allowed to be empty\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "fp",
											"type": "default"
										},
										{
											"key": "password",
											"value": "123",
											"type": "default"
										},
										{
											"key": "email",
											"value": "flp@gmail.com",
											"type": "default"
										},
										{
											"key": "full_name",
											"value": "feliciaa",
											"type": "default"
										},
										{
											"key": "display_name",
											"value": "",
											"type": "default"
										}
									]
								},
								"url": {
									"raw": "{{host}}/developers/register",
									"host": [
										"{{host}}"
									],
									"path": [
										"developers",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register Duplicate Entry",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 400 value', () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response should return \\'User is already registered\\'', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.ownProperty('message');\r",
											"    pm.expect(responseJson.message).to.equals('User is already registered');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "felicia",
											"type": "default"
										},
										{
											"key": "password",
											"value": "123",
											"type": "default"
										},
										{
											"key": "email",
											"value": "feliciap@gmail.com",
											"type": "default"
										},
										{
											"key": "full_name",
											"value": "feliciaa",
											"type": "default"
										},
										{
											"key": "display_name",
											"value": "fel",
											"type": "default"
										}
									]
								},
								"url": {
									"raw": "{{host}}/developers/register",
									"host": [
										"{{host}}"
									],
									"path": [
										"developers",
										"register"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "oauth2",
						"oauth2": [
							{
								"key": "addTokenTo",
								"value": "header",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Login",
					"item": [
						{
							"name": "Login Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 200 value', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response should return JWT token', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    const { token } = responseJson;\r",
											"    pm.environment.set('fixedToken', token);\r",
											"    pm.expect(token).to.exist;\r",
											"    pm.expect(token).to.not.be.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"value": "",
											"type": "default",
											"disabled": true
										},
										{
											"key": "username",
											"value": "feb",
											"type": "default"
										},
										{
											"key": "password",
											"value": "123",
											"type": "default"
										}
									]
								},
								"url": {
									"raw": "{{host}}/developers/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"developers",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login Invalid Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 401 value', () => {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test('response body should have message \\'Invalid password\\'', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.ownProperty('message');\r",
											"    pm.expect(responseJson.message).to.equals('Invalid password');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"value": "",
											"type": "default",
											"disabled": true
										},
										{
											"key": "username",
											"value": "feb",
											"type": "default"
										},
										{
											"key": "password",
											"value": "12",
											"type": "default"
										}
									]
								},
								"url": {
									"raw": "{{host}}/developers/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"developers",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login but Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 404 value', () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test('response body should have message \\'Developer not found\\'', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.ownProperty('message');\r",
											"    pm.expect(responseJson.message).to.equals('Developer not found');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"value": "",
											"type": "default",
											"disabled": true
										},
										{
											"key": "username",
											"value": "febrian",
											"type": "default"
										},
										{
											"key": "password",
											"value": "12",
											"type": "default"
										}
									]
								},
								"url": {
									"raw": "{{host}}/developers/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"developers",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Withdrawal",
					"item": [
						{
							"name": "Withdrawal Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 200 value', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('response body should return object', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.ownProperty('message');\r",
											"    pm.expect(responseJson).to.ownProperty('full_name');\r",
											"    pm.expect(responseJson).to.ownProperty('username');\r",
											"    pm.expect(responseJson).to.ownProperty('display_name');\r",
											"    pm.expect(responseJson).to.ownProperty('balance');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "amount",
											"value": "1000",
											"type": "text"
										},
										{
											"key": "account_number",
											"value": "2385389",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/developers/withdrawal",
									"host": [
										"{{host}}"
									],
									"path": [
										"developers",
										"withdrawal"
									]
								}
							},
							"response": []
						},
						{
							"name": "Withdrawal Error Validation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 400 value', () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response should have message \\'must be a number\\'', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.message).to.include(\"must be a number\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "amount",
											"value": "",
											"type": "text"
										},
										{
											"key": "account_number",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/developers/withdrawal",
									"host": [
										"{{host}}"
									],
									"path": [
										"developers",
										"withdrawal"
									]
								}
							},
							"response": []
						},
						{
							"name": "Withdrawal Insufficient Balance",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 400 value', () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response should be \\'Insufficient balance\\'', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.ownProperty('message');\r",
											"    pm.expect(responseJson.message).to.equals('Insufficient balance');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "amount",
											"value": "99999999999",
											"type": "text"
										},
										{
											"key": "account_number",
											"value": "2385389",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/developers/withdrawal",
									"host": [
										"{{host}}"
									],
									"path": [
										"developers",
										"withdrawal"
									]
								}
							},
							"response": []
						},
						{
							"name": "Withdrawal Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 401 value', () => {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test('Response should be \\'Unauthorized\\'', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.ownProperty('message');\r",
											"    pm.expect(responseJson.message).to.equals('Unauthorized');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "amount",
											"value": "",
											"type": "text"
										},
										{
											"key": "account_number",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/developers/withdrawal",
									"host": [
										"{{host}}"
									],
									"path": [
										"developers",
										"withdrawal"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Add",
					"item": [
						{
							"name": "Add but Token Expired",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 401 value', () => {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test('response should be Invalid Token', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.message).equals(\"Invalid Token\")\r",
											"}) "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{expToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "customer_id",
											"value": "C0003",
											"type": "default"
										}
									]
								},
								"url": {
									"raw": "{{host}}/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Duplicate Entry",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 400 value', () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response should be \\'customer_id already registered\\'', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.ownProperty('message');\r",
											"    pm.expect(responseJson.message).to.equals('customer_id already registered');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{fixedToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "customer_id",
											"value": "hehe1",
											"type": "default"
										}
									]
								},
								"url": {
									"raw": "{{host}}/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Unauthiorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 401 value', () => {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test('Response should be \\'Unauthorized\\'', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.ownProperty('message');\r",
											"    pm.expect(responseJson.message).to.equals('Unauthorized');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "customer_id",
											"value": "hehe1",
											"type": "default"
										}
									]
								},
								"url": {
									"raw": "{{host}}/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Validation Error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 400 value', () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response should not have empty fields', () => {\r",
											"  const responseJson = pm.response.json();\r",
											"  pm.expect(responseJson.message).to.include(\"is required\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{fixedToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "user_id",
											"value": "C0003",
											"type": "default"
										}
									]
								},
								"url": {
									"raw": "{{host}}/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 201 value', () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test('Response should return customer_id and status', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.ownProperty('status');\r",
											"    pm.expect(responseJson.status).to.equals(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{fixedToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "customer_id",
											"value": "C0004",
											"type": "default"
										}
									]
								},
								"url": {
									"raw": "{{host}}/users",
									"host": [
										"{{host}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Edit",
					"item": [
						{
							"name": "Edit but Token Expired",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 401 value', () => {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test('response should be Invalid Token', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.message).equals(\"Invalid Token\")\r",
											"}) "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{expToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "status",
											"value": "2",
											"type": "default"
										}
									]
								},
								"url": {
									"raw": "{{host}}/users/:customer_id",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										":customer_id"
									],
									"variable": [
										{
											"key": "customer_id",
											"value": "wkwk2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Not Registered",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 400 value', () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('response should be \\'customer_id is not registered\\'', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.ownProperty('message');\r",
											"    pm.expect(responseJson.message).to.equals('customer_id is not registered');\r",
											"}) "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{fixedToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "status",
											"value": "2",
											"type": "default"
										}
									]
								},
								"url": {
									"raw": "{{host}}/users/:customer_id",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										":customer_id"
									],
									"variable": [
										{
											"key": "customer_id",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Validation Error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 400 value', () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response should not have empty fields', () => {\r",
											"  const responseJson = pm.response.json();\r",
											"  pm.expect(responseJson.message).to.include(\"must be less than or equal to 1\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{fixedToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "status",
											"value": "2",
											"type": "default"
										}
									]
								},
								"url": {
									"raw": "{{host}}/users/:customer_id",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										":customer_id"
									],
									"variable": [
										{
											"key": "customer_id",
											"value": "hehe1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Status Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 200 value', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response should return customer_id and status', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.ownProperty('customer_id');\r",
											"    pm.expect(responseJson.customer_id).to.equals(pm.environment.get('customerId'));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{fixedToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "status",
											"value": "0",
											"type": "default"
										}
									]
								},
								"url": {
									"raw": "{{host}}/users/:customer_id",
									"host": [
										"{{host}}"
									],
									"path": [
										"users",
										":customer_id"
									],
									"variable": [
										{
											"key": "customer_id",
											"value": "hehe1"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Products",
			"item": [
				{
					"name": "Add",
					"item": [
						{
							"name": "Add Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 401 value', () => {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test('Response should be \\'Unauthorized\\'', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.ownProperty('message');\r",
											"    pm.expect(responseJson.message).to.equals('Unauthorized');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "headerPrefix",
											"value": "Bearer",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "",
											"type": "default"
										},
										{
											"key": "description",
											"value": "",
											"type": "default"
										},
										{
											"key": "price",
											"value": "",
											"type": "default"
										},
										{
											"key": "stock",
											"value": "",
											"type": "default"
										},
										{
											"key": "image",
											"type": "file",
											"src": []
										}
									]
								},
								"url": {
									"raw": "{{host}}/products",
									"host": [
										"{{host}}"
									],
									"path": [
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Validation Error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 400 value', () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response should not have empty fields', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.message).to.include(\"is not allowed to be empty\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{fixedToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "",
											"type": "default"
										},
										{
											"key": "description",
											"value": "",
											"type": "default"
										},
										{
											"key": "price",
											"value": "",
											"type": "default"
										},
										{
											"key": "stock",
											"value": "",
											"type": "default"
										},
										{
											"key": "image",
											"type": "file",
											"src": []
										}
									]
								},
								"url": {
									"raw": "{{host}}/products",
									"host": [
										"{{host}}"
									],
									"path": [
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 201 value', () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test('Response should return message and product', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.ownProperty('message');\r",
											"    pm.expect(responseJson.message).to.equals('Success add product');\r",
											"    pm.expect(responseJson).to.ownProperty('data');\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{fixedToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "indomie",
											"type": "default"
										},
										{
											"key": "description",
											"value": "enak",
											"type": "default"
										},
										{
											"key": "price",
											"value": "3000",
											"type": "default"
										},
										{
											"key": "stock",
											"value": "12",
											"type": "default"
										},
										{
											"key": "image",
											"type": "file",
											"src": "/C:/Users/Felicia Pangestu/OneDrive/Pictures/geprek.jpg"
										}
									]
								},
								"url": {
									"raw": "{{host}}/products",
									"host": [
										"{{host}}"
									],
									"path": [
										"products"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GetAll",
					"item": [
						{
							"name": "Get All Products",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 200 value', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response should not have empty fields', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.ownProperty('message');\r",
											"    pm.expect(responseJson.message).to.equals('OK');\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{fixedToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/products",
									"host": [
										"{{host}}"
									],
									"path": [
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Products Unauthourized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 401 value', () => {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test('Response should be \\'Unauthorized\\'', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.ownProperty('message');\r",
											"    pm.expect(responseJson.message).to.equals('Unauthorized');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "headerPrefix",
											"value": "Bearer",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/products",
									"host": [
										"{{host}}"
									],
									"path": [
										"products"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GetDetail",
					"item": [
						{
							"name": "Get Detail Products Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 403 value', () => {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test('response should be \\'FORBIDDEN\\'', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.ownProperty('message');\r",
											"    pm.expect(responseJson.message).to.equals('Forbidden');\r",
											"}) "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{fixedToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/products/:product_id",
									"host": [
										"{{host}}"
									],
									"path": [
										"products",
										":product_id"
									],
									"variable": [
										{
											"key": "product_id",
											"value": "P0008"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Detail Products",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 200 value', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response should not have empty fields', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.ownProperty('message');\r",
											"    pm.expect(responseJson.message).to.equals('OK');\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{fixedToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/products",
									"host": [
										"{{host}}"
									],
									"path": [
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Detail Products Unauthourized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 401 value', () => {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test('Response should be \\'Unauthorized\\'', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.ownProperty('message');\r",
											"    pm.expect(responseJson.message).to.equals('Unauthorized');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "headerPrefix",
											"value": "Bearer",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/products/:product_id",
									"host": [
										"{{host}}"
									],
									"path": [
										"products",
										":product_id"
									],
									"variable": [
										{
											"key": "product_id",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Edit",
					"item": [
						{
							"name": "Edit Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 401 value', () => {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test('Response should be \\'Unauthorized\\'', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.ownProperty('message');\r",
											"    pm.expect(responseJson.message).to.equals('Unauthorized');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "headerPrefix",
											"value": "Bearer",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "",
											"type": "text"
										},
										{
											"key": "description",
											"value": "",
											"type": "text"
										},
										{
											"key": "price",
											"value": "",
											"type": "text"
										},
										{
											"key": "stock",
											"value": "",
											"type": "text"
										},
										{
											"key": "status",
											"value": "",
											"type": "text"
										},
										{
											"key": "image",
											"type": "file",
											"src": []
										}
									]
								},
								"url": {
									"raw": "{{host}}/products/:product_id",
									"host": [
										"{{host}}"
									],
									"path": [
										"products",
										":product_id"
									],
									"variable": [
										{
											"key": "product_id",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 200 value', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response should be \\'Success update product\\'', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.ownProperty('message');\r",
											"    pm.expect(responseJson.message).to.equals('Success update product');\r",
											"    pm.expect(responseJson).to.ownProperty('data');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{fixedToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "Nasi goreng",
											"type": "text"
										},
										{
											"key": "description",
											"value": "uenak",
											"type": "text"
										},
										{
											"key": "price",
											"value": "25000",
											"type": "text"
										},
										{
											"key": "stock",
											"value": "12",
											"type": "text"
										},
										{
											"key": "status",
											"value": "1",
											"type": "text"
										},
										{
											"key": "image",
											"type": "file",
											"src": "/C:/Users/cingk/OneDrive/Documents/Febrian/SMT 4/Web Service/Proyek_WS/uploads/1684061886348-571905485.png"
										}
									]
								},
								"url": {
									"raw": "{{host}}/products/:product_id",
									"host": [
										"{{host}}"
									],
									"path": [
										"products",
										":product_id"
									],
									"variable": [
										{
											"key": "product_id",
											"value": "P0001"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Products Validation Error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 400 value', () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response should not have empty fields', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.message).to.include(\"is not allowed to be empty\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{fixedToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "",
											"type": "text"
										},
										{
											"key": "description",
											"value": "",
											"type": "text"
										},
										{
											"key": "price",
											"value": "",
											"type": "text"
										},
										{
											"key": "stock",
											"value": "",
											"type": "text"
										},
										{
											"key": "status",
											"value": "",
											"type": "text"
										},
										{
											"key": "image",
											"type": "file",
											"src": []
										}
									]
								},
								"url": {
									"raw": "{{host}}/products/:product_id",
									"host": [
										"{{host}}"
									],
									"path": [
										"products",
										":product_id"
									],
									"variable": [
										{
											"key": "product_id",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Products Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 403 value', () => {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test('response should be \\'FORBIDDEN\\'', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.ownProperty('message');\r",
											"    pm.expect(responseJson.message).to.equals('Forbidden');\r",
											"}) "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{fixedToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "nasi goreng",
											"type": "text"
										},
										{
											"key": "description",
											"value": "enak sekali",
											"type": "text"
										},
										{
											"key": "price",
											"value": "25000",
											"type": "text"
										},
										{
											"key": "stock",
											"value": "5",
											"type": "text"
										},
										{
											"key": "status",
											"value": "1",
											"type": "text"
										},
										{
											"key": "image",
											"type": "file",
											"src": "/C:/Users/cingk/OneDrive/Documents/Febrian/SMT 4/Web Service/Proyek_WS/uploads/1684061894223-14073555.png"
										}
									]
								},
								"url": {
									"raw": "{{host}}/products/:product_id",
									"host": [
										"{{host}}"
									],
									"path": [
										"products",
										":product_id"
									],
									"variable": [
										{
											"key": "product_id",
											"value": "P0008"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Cart",
			"item": [
				{
					"name": "Add",
					"item": [
						{
							"name": "Add Carts Authorization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 401 value', () => {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test('Response should be \\'Unauthorized\\'', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.ownProperty('message');\r",
											"    pm.expect(responseJson.message).to.equals('Unauthorized');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "headerPrefix",
											"value": "Bearer",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "x-auth-token",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImZlYiIsImlhdCI6MTY4NDQyNzI0MywiZXhwIjoxNjg0NDMwODQzfQ.3sPSHLJn8QrPaazA5AVjkVRX1mVu-jgBJ5P_kdhd-HM",
										"type": "default",
										"disabled": true
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "customer_id",
											"value": "C0002",
											"type": "default"
										},
										{
											"key": "product_id",
											"value": "P0001",
											"type": "default"
										},
										{
											"key": "quantity",
											"value": "2",
											"type": "default"
										}
									]
								},
								"url": {
									"raw": "{{host}}/carts",
									"host": [
										"{{host}}"
									],
									"path": [
										"carts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Carts User Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 404 value', () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test('response body should have message \\'User not found\\'', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.ownProperty('message');\r",
											"    pm.expect(responseJson.message).to.equals('User not found!');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{fixedToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "x-auth-token",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImZlYiIsImlhdCI6MTY4NDQyNzI0MywiZXhwIjoxNjg0NDMwODQzfQ.3sPSHLJn8QrPaazA5AVjkVRX1mVu-jgBJ5P_kdhd-HM",
										"type": "default",
										"disabled": true
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "customer_id",
											"value": "C0016",
											"type": "default"
										},
										{
											"key": "product_id",
											"value": "P0001",
											"type": "default"
										},
										{
											"key": "quantity",
											"value": "2",
											"type": "default"
										}
									]
								},
								"url": {
									"raw": "{{host}}/carts",
									"host": [
										"{{host}}"
									],
									"path": [
										"carts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Carts Duplicate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 200 value', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('response body should have message \\'User not found\\'', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.ownProperty('cart_id');\r",
											"    pm.expect(responseJson).to.ownProperty('product_name');\r",
											"    pm.expect(responseJson).to.ownProperty('quantity');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{fixedToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "x-auth-token",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImZlYiIsImlhdCI6MTY4NDQyNzI0MywiZXhwIjoxNjg0NDMwODQzfQ.3sPSHLJn8QrPaazA5AVjkVRX1mVu-jgBJ5P_kdhd-HM",
										"type": "default",
										"disabled": true
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "customer_id",
											"value": "hehe1",
											"type": "default"
										},
										{
											"key": "product_id",
											"value": "P0001",
											"type": "default"
										},
										{
											"key": "quantity",
											"value": "2",
											"type": "default"
										}
									]
								},
								"url": {
									"raw": "{{host}}/carts",
									"host": [
										"{{host}}"
									],
									"path": [
										"carts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Carts Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 201 value', () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test('response body should return object', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.ownProperty('cart_id');\r",
											"    pm.expect(responseJson).to.ownProperty('product_name');\r",
											"    pm.expect(responseJson).to.ownProperty('quantity');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{fixedToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "x-auth-token",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImZlYiIsImlhdCI6MTY4NDQyNzI0MywiZXhwIjoxNjg0NDMwODQzfQ.3sPSHLJn8QrPaazA5AVjkVRX1mVu-jgBJ5P_kdhd-HM",
										"type": "default",
										"disabled": true
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "customer_id",
											"value": "hehe2",
											"type": "default"
										},
										{
											"key": "product_id",
											"value": "P0002",
											"type": "default"
										},
										{
											"key": "quantity",
											"value": "2",
											"type": "default"
										}
									]
								},
								"url": {
									"raw": "{{host}}/carts",
									"host": [
										"{{host}}"
									],
									"path": [
										"carts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Carts Invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 400 value', () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('response body should have message \\'Product inactive or not registered\\'', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.ownProperty('message');\r",
											"    pm.expect(responseJson.message).to.equals(\"Product inactive or not registered\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{fixedToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "x-auth-token",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImZlYiIsImlhdCI6MTY4NDQyNzI0MywiZXhwIjoxNjg0NDMwODQzfQ.3sPSHLJn8QrPaazA5AVjkVRX1mVu-jgBJ5P_kdhd-HM",
										"type": "default",
										"disabled": true
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "customer_id",
											"value": "hehe2",
											"type": "default"
										},
										{
											"key": "product_id",
											"value": "P0003",
											"type": "default"
										},
										{
											"key": "quantity",
											"value": "2",
											"type": "default"
										}
									]
								},
								"url": {
									"raw": "{{host}}/carts",
									"host": [
										"{{host}}"
									],
									"path": [
										"carts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Carts Validation Qty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 400 value', () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response should not have empty fields', () => {\r",
											"  const responseJson = pm.response.json();\r",
											"  pm.expect(responseJson.message).to.include(\"must be greater than or equal to 1\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{fixedToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "x-auth-token",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImZlYiIsImlhdCI6MTY4NDQyNzI0MywiZXhwIjoxNjg0NDMwODQzfQ.3sPSHLJn8QrPaazA5AVjkVRX1mVu-jgBJ5P_kdhd-HM",
										"type": "default",
										"disabled": true
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "customer_id",
											"value": "C0002",
											"type": "default"
										},
										{
											"key": "product_id",
											"value": "P0001",
											"type": "default"
										},
										{
											"key": "quantity",
											"value": "0",
											"type": "default"
										}
									]
								},
								"url": {
									"raw": "{{host}}/carts",
									"host": [
										"{{host}}"
									],
									"path": [
										"carts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Carts Validation String",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 400 value', () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response should not have empty fields', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.message).to.include(\"is not allowed to be empty\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{fixedToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "x-auth-token",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImZlYiIsImlhdCI6MTY4NDQyNzI0MywiZXhwIjoxNjg0NDMwODQzfQ.3sPSHLJn8QrPaazA5AVjkVRX1mVu-jgBJ5P_kdhd-HM",
										"type": "default",
										"disabled": true
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "customer_id",
											"value": "C0002",
											"type": "default"
										},
										{
											"key": "product_id",
											"value": "",
											"type": "default"
										},
										{
											"key": "quantity",
											"value": "2",
											"type": "default"
										}
									]
								},
								"url": {
									"raw": "{{host}}/carts",
									"host": [
										"{{host}}"
									],
									"path": [
										"carts"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get",
					"item": [
						{
							"name": "Get Carts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 200 value', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response should not have empty fields', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.length)!=0\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{fixedToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{host}}/carts/:customer_id",
									"host": [
										"{{host}}"
									],
									"path": [
										"carts",
										":customer_id"
									],
									"variable": [
										{
											"key": "customer_id",
											"value": "hehe1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Carts Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 401 value', () => {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test('Response should be \\'Unauthorized\\'', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.ownProperty('message');\r",
											"    pm.expect(responseJson.message).to.equals('Unauthorized');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "headerPrefix",
											"value": "Bearer",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{host}}/carts/:customer_id",
									"host": [
										"{{host}}"
									],
									"path": [
										"carts",
										":customer_id"
									],
									"variable": [
										{
											"key": "customer_id",
											"value": "C0001"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Carts User Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 404 value', () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test('response body should have message \\'User not found\\'', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.ownProperty('message');\r",
											"    pm.expect(responseJson.message).to.equals('User not found');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{fixedToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{host}}/carts/:customer_id",
									"host": [
										"{{host}}"
									],
									"path": [
										"carts",
										":customer_id"
									],
									"variable": [
										{
											"key": "customer_id",
											"value": "C0016"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Edit",
					"item": [
						{
							"name": "Edit Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 401 value', () => {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test('Response should be \\'Unauthorized\\'', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.ownProperty('message');\r",
											"    pm.expect(responseJson.message).to.equals('Unauthorized');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "headerPrefix",
											"value": "Bearer",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "quantity",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/carts/:customer_id/:product:id",
									"host": [
										"{{host}}"
									],
									"path": [
										"carts",
										":customer_id",
										":product:id"
									],
									"variable": [
										{
											"key": "customer_id",
											"value": null
										},
										{
											"key": "product:id",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Products Validation Error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 400 value', () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response should not have empty fields', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.message).to.include(\"must be\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{fixedToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "quantity",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/carts/:customer_id/:product:id",
									"host": [
										"{{host}}"
									],
									"path": [
										"carts",
										":customer_id",
										":product:id"
									],
									"variable": [
										{
											"key": "customer_id",
											"value": null
										},
										{
											"key": "product:id",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Products User Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 404 value', () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test('response should be \\'User not found\\'', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.ownProperty('message');\r",
											"    pm.expect(responseJson.message).to.equals('User not found!');\r",
											"}) "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{fixedToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "quantity",
											"value": "2",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/carts/:customer_id/:product:id",
									"host": [
										"{{host}}"
									],
									"path": [
										"carts",
										":customer_id",
										":product:id"
									],
									"variable": [
										{
											"key": "customer_id",
											"value": "C0001"
										},
										{
											"key": "product:id",
											"value": "P0008"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Products Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 403 value', () => {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test('response should be \\'FORBIDDEN\\'', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.ownProperty('message');\r",
											"    pm.expect(responseJson.message).to.include('is not your product!');\r",
											"}) "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{fixedToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "quantity",
											"value": "2",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{host}}/carts/:customer_id/:product:id",
									"host": [
										"{{host}}"
									],
									"path": [
										"carts",
										":customer_id",
										":product:id"
									],
									"variable": [
										{
											"key": "customer_id",
											"value": "hehe1"
										},
										{
											"key": "product:id",
											"value": "P0008"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Carts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 200 value', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('response body should return object', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.ownProperty('cart_id');\r",
											"    pm.expect(responseJson).to.ownProperty('product_name');\r",
											"    pm.expect(responseJson).to.ownProperty('quantity');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{fixedToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "quantity",
											"value": "2",
											"type": "default"
										}
									]
								},
								"url": {
									"raw": "{{host}}/carts/:customer_id/:product:id",
									"host": [
										"{{host}}"
									],
									"path": [
										"carts",
										":customer_id",
										":product:id"
									],
									"variable": [
										{
											"key": "customer_id",
											"value": "hehe2"
										},
										{
											"key": "product:id",
											"value": "P0002"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete",
					"item": [
						{
							"name": "Delete Cart Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 401 value', () => {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test('Response should be \\'Unauthorized\\'', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.ownProperty('message');\r",
											"    pm.expect(responseJson.message).to.equals('Unauthorized');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "headerPrefix",
											"value": "Bearer",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{host}}/:customer_id/:product:id",
									"host": [
										"{{host}}"
									],
									"path": [
										":customer_id",
										":product:id"
									],
									"variable": [
										{
											"key": "customer_id",
											"value": ""
										},
										{
											"key": "product:id",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Cart Validation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 400 value', () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response should be in accordance with', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.message).to.include(\"length must be\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{fixedToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{host}}/carts/:customer_id/:product:id",
									"host": [
										"{{host}}"
									],
									"path": [
										"carts",
										":customer_id",
										":product:id"
									],
									"variable": [
										{
											"key": "customer_id",
											"value": null
										},
										{
											"key": "product:id",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Cart Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 200 value', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response should be notice that the product removed successfully', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.message).to.include(\"Product has been removed from cart\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{fixedToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{host}}/carts/:customer_id/:product:id",
									"host": [
										"{{host}}"
									],
									"path": [
										"carts",
										":customer_id",
										":product:id"
									],
									"variable": [
										{
											"key": "customer_id",
											"value": "hehe2"
										},
										{
											"key": "product:id",
											"value": "P0002"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Cart Unsuccess",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 400 value', () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response should be notice that the product removed successfully', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.message).to.include(\"is not in user's cart!\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{fixedToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{host}}/carts/:customer_id/:product:id",
									"host": [
										"{{host}}"
									],
									"path": [
										"carts",
										":customer_id",
										":product:id"
									],
									"variable": [
										{
											"key": "customer_id",
											"value": "hehe2"
										},
										{
											"key": "product:id",
											"value": "P0002"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Cart Forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 403 value', () => {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test('Response should be notice that the product removed successfully', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.message).to.include(\"is not your product!\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{fixedToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{host}}/carts/:customer_id/:product:id",
									"host": [
										"{{host}}"
									],
									"path": [
										"carts",
										":customer_id",
										":product:id"
									],
									"variable": [
										{
											"key": "customer_id",
											"value": "hehe2"
										},
										{
											"key": "product:id",
											"value": "P0004"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "Checkout",
					"item": [
						{
							"name": "Checkout Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 201 value', () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test('response body should return object', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.ownProperty('invoice');\r",
											"    pm.expect(responseJson).to.ownProperty('bank');\r",
											"    pm.expect(responseJson).to.ownProperty('va_number');\r",
											"    pm.expect(responseJson).to.ownProperty('transaction_status');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "headerPrefix",
											"value": "Bearer",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"customer_id\": \"C0001\",\r\n    \"products_id\": [\r\n        \"P0001\"\r\n    ],\r\n    \"bank\": \"bca\",\r\n    \"customer_name\": \"fp\",\r\n    \"customer_email\": \"fp@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/orders/checkout",
									"host": [
										"{{host}}"
									],
									"path": [
										"orders",
										"checkout"
									]
								}
							},
							"response": []
						},
						{
							"name": "Checkout User Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 404 value', () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test('response body should have message \\'User id is not registered\\'', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.ownProperty('message');\r",
											"    pm.expect(responseJson.message).to.equals('User id is not registered');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "headerPrefix",
											"value": "Bearer",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"customer_id\": \"C9999\",\r\n    \"products_id\": [\r\n        \"P0001\"\r\n    ],\r\n    \"bank\": \"bca\",\r\n    \"customer_name\": \"fp\",\r\n    \"customer_email\": \"fp@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/orders/checkout",
									"host": [
										"{{host}}"
									],
									"path": [
										"orders",
										"checkout"
									]
								}
							},
							"response": []
						},
						{
							"name": "Checkout Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 401 value', () => {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test('Response should be \\'Unauthorized\\'', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.ownProperty('message');\r",
											"    pm.expect(responseJson.message).to.equals('Unauthorized');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "headerPrefix",
											"value": "Bearer",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"customer_id\": \"C0001\",\r\n    \"products_id\": [\r\n        \"P0001\"\r\n    ],\r\n    \"bank\": \"bca\",\r\n    \"customer_name\": \"fp\",\r\n    \"customer_email\": \"fp@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/orders/checkout",
									"host": [
										"{{host}}"
									],
									"path": [
										"orders",
										"checkout"
									]
								}
							},
							"response": []
						},
						{
							"name": "Checkout Error Validation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 400 value', () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response should not have empty fields', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.message).to.include(\"is not allowed to be empty\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "headerPrefix",
											"value": "Bearer",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"customer_id\": \"C0001\",\r\n    \"products_id\": [\r\n        \r\n    ],\r\n    \"bank\": \"bca\",\r\n    \"customer_name\": \"fp\",\r\n    \"customer_email\": \"fp@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/orders/checkout",
									"host": [
										"{{host}}"
									],
									"path": [
										"orders",
										"checkout"
									]
								}
							},
							"response": []
						},
						{
							"name": "Checkout Invalid Bank",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 400 value', () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response should be \\'Invalid bank name\\'', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.ownProperty('message');\r",
											"    pm.expect(responseJson.message).to.equals('Invalid bank name');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "headerPrefix",
											"value": "Bearer",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"customer_id\": \"C0001\",\r\n    \"products_id\": [\r\n        \"P0001\"\r\n    ],\r\n    \"bank\": \"test\",\r\n    \"customer_name\": \"fp\",\r\n    \"customer_email\": \"fp@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/orders/checkout",
									"host": [
										"{{host}}"
									],
									"path": [
										"orders",
										"checkout"
									]
								}
							},
							"response": []
						},
						{
							"name": "Checkout Invalid Product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 400 value', () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response should have message \\'is not registered\\' ', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.message).to.include(\"is not registered\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "headerPrefix",
											"value": "Bearer",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"customer_id\": \"C0001\",\r\n    \"products_id\": [\r\n        \"P9999\"\r\n    ],\r\n    \"bank\": \"bca\",\r\n    \"customer_name\": \"fp\",\r\n    \"customer_email\": \"fp@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/orders/checkout",
									"host": [
										"{{host}}"
									],
									"path": [
										"orders",
										"checkout"
									]
								}
							},
							"response": []
						},
						{
							"name": "Checkout Unavailable Product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 400 value', () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response should have message \\'is not available\\' ', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.message).to.include(\"is not available\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "headerPrefix",
											"value": "Bearer",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"customer_id\": \"C0001\",\r\n    \"products_id\": [\r\n        \"P0002\"\r\n    ],\r\n    \"bank\": \"bca\",\r\n    \"customer_name\": \"fp\",\r\n    \"customer_email\": \"fp@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/orders/checkout",
									"host": [
										"{{host}}"
									],
									"path": [
										"orders",
										"checkout"
									]
								}
							},
							"response": []
						},
						{
							"name": "Checkout Not in Cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 400 value', () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response should have message \\'is not in user\\'s cart\\' ', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.message).to.include(\"is not in user's cart\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "headerPrefix",
											"value": "Bearer",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"customer_id\": \"C0001\",\r\n    \"products_id\": [\r\n        \"P0002\"\r\n    ],\r\n    \"bank\": \"bca\",\r\n    \"customer_name\": \"fp\",\r\n    \"customer_email\": \"fp@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/orders/checkout",
									"host": [
										"{{host}}"
									],
									"path": [
										"orders",
										"checkout"
									]
								}
							},
							"response": []
						},
						{
							"name": "Checkout Insufficient Stock",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 400 value', () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response should have message \\'Insufficient Stock\\' ', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.message).to.include(\"Insufficient Stock\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "headerPrefix",
											"value": "Bearer",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"customer_id\": \"C0001\",\r\n    \"products_id\": [\r\n        \"P0001\"\r\n    ],\r\n    \"bank\": \"bca\",\r\n    \"customer_name\": \"fp\",\r\n    \"customer_email\": \"fp@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/orders/checkout",
									"host": [
										"{{host}}"
									],
									"path": [
										"orders",
										"checkout"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Payment",
					"item": [
						{
							"name": "Payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 200 value', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('response body should return object', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.ownProperty('invoice');\r",
											"    pm.expect(responseJson).to.ownProperty('bank');\r",
											"    pm.expect(responseJson).to.ownProperty('va_number');\r",
											"    pm.expect(responseJson).to.ownProperty('transaction_status');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "headerPrefix",
											"value": "Bearer",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "invoice",
											"value": "INV200520230001",
											"type": "default"
										}
									]
								},
								"url": {
									"raw": "{{host}}/orders/payment",
									"host": [
										"{{host}}"
									],
									"path": [
										"orders",
										"payment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Payment Invalid Invoice",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 400 value', () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response should be \\'Invalid invoice number\\'', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.ownProperty('message');\r",
											"    pm.expect(responseJson.message).to.equals('Invalid invoice number');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "headerPrefix",
											"value": "Bearer",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "invoice",
											"value": "INV000000000000",
											"type": "default"
										}
									]
								},
								"url": {
									"raw": "{{host}}/orders/payment",
									"host": [
										"{{host}}"
									],
									"path": [
										"orders",
										"payment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Payment Error Validation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 400 value', () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response should be \\'invoice is not allowed to be empty\\'', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.ownProperty('message');\r",
											"    pm.expect(responseJson.message).to.equals('invoice is not allowed to be empty');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "headerPrefix",
											"value": "Bearer",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "invoice",
											"value": "",
											"type": "default"
										}
									]
								},
								"url": {
									"raw": "{{host}}/orders/payment",
									"host": [
										"{{host}}"
									],
									"path": [
										"orders",
										"payment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Payment Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 401 value', () => {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test('Response should be \\'Unauthorized\\'', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.ownProperty('message');\r",
											"    pm.expect(responseJson.message).to.equals('Unauthorized');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "headerPrefix",
											"value": "Bearer",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "invoice",
											"value": "INV200520230001",
											"type": "default"
										}
									]
								},
								"url": {
									"raw": "localhost:3000/api/orders/payment",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"orders",
										"payment"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "getAllOrder",
					"item": [
						{
							"name": "Get All Orders",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 200 value', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// pm.test('Response should not have empty fields', () => {\r",
											"//     const responseJson = pm.response.json();\r",
											"//     pm.expect(responseJson)!=0\r",
											"// })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{fixedToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/orders",
									"host": [
										"{{host}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Orders Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 401 value', () => {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test('Response should be \\'Unauthorized\\'', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.ownProperty('message');\r",
											"    pm.expect(responseJson.message).to.equals('Unauthorized');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "headerPrefix",
											"value": "Bearer",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/orders",
									"host": [
										"{{host}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GetDetailOrder",
					"item": [
						{
							"name": "Get Detail Order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 200 value', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/orders/:invoice/details",
									"host": [
										"{{host}}"
									],
									"path": [
										"orders",
										":invoice",
										"details"
									],
									"variable": [
										{
											"key": "invoice",
											"value": "INV200520230001"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Detail Order Invalid Invoice",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 400 value', () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response should be \\'Invalid invoice number\\'', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.ownProperty('message');\r",
											"    pm.expect(responseJson.message).to.equals('Invalid invoice number');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/orders/:invoice/details",
									"host": [
										"{{host}}"
									],
									"path": [
										"orders",
										":invoice",
										"details"
									],
									"variable": [
										{
											"key": "invoice",
											"value": "INV000000000000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Detail Order Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 401 value', () => {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test('Response should be \\'Unauthorized\\'', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.ownProperty('message');\r",
											"    pm.expect(responseJson.message).to.equals('Unauthorized');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/orders/:invoice/details",
									"host": [
										"{{host}}"
									],
									"path": [
										"orders",
										":invoice",
										"details"
									],
									"variable": [
										{
											"key": "invoice",
											"value": null
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GetAllOrderUser",
					"item": [
						{
							"name": "Get All Order User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 200 value', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/orders/:customer_id",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"orders",
										":customer_id"
									],
									"variable": [
										{
											"key": "customer_id",
											"value": "C0001"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Order User Unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 401 value', () => {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test('Response should be \\'Unauthorized\\'', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.ownProperty('message');\r",
											"    pm.expect(responseJson.message).to.equals('Unauthorized');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/orders/:customer_id",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"orders",
										":customer_id"
									],
									"variable": [
										{
											"key": "customer_id",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Order User Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('response status code should have 404 value', () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test('Response should be \\'User not found!\\'', () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson).to.ownProperty('message');\r",
											"    pm.expect(responseJson.message).to.equals('User not found!');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/orders/:customer_id",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"orders",
										":customer_id"
									],
									"variable": [
										{
											"key": "customer_id",
											"value": "C9999"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}